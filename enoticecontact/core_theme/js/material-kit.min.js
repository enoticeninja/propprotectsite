 var big_image;
 $(document).ready(function() {
     window_width = $(window).width();
     $navbar = $('.navbar[color-on-scroll]');
     scroll_distance = $navbar.attr('color-on-scroll') || 500;

     materialKit.initRotateCard();
     materialKit.initColoredShadows();
     materialKit.initAtvImg()
 });
 $(document).on('click', '.card-rotate .btn-rotate', function() {
     var $rotating_card_container = $(this).closest('.rotating-card-container');
     if ($rotating_card_container.hasClass('hover')) {
         $rotating_card_container.removeClass('hover')
     } else {
         $rotating_card_container.addClass('hover')
     }
 });

 $(window).on('resize', function() {
     materialKit.initRotateCard()
 });
 materialKit = {
     misc: {
         navbar_menu_visible: 0,
         window_width: 0,
         transparent: !0,
         colored_shadows: !0,
         fixedTop: !1,
         navbar_initialized: !1,
         isWindow: document.documentMode || /Edge/.test(navigator.userAgent)
     },
     initAtvImg: function() {
         $('.card-atv').each(function() {
             var $atv_div = $(this).find('.atvImg');
             var $atv_img = $atv_div.find('img');
             var img_src = $atv_img.attr('src');
             var atv_image_layer = '<div class="atvImg-layer" data-img="' + img_src + '"/>';
             $atv_div.css('height', $atv_img.height() + 'px');
             $atv_div.append(atv_image_layer)
         });
         atvImg()
     },
     initColoredShadows: function() {
         if (materialKit.misc.colored_shadows == !0) {
             if (!materialKit.misc.isWindows) {
                 $('.card:not([data-colored-shadow="false"]) .card-image').each(function() {
                     var $card_img = $(this);
                     is_on_dark_screen = $(this).closest('.section-dark, .section-image').length;
                     if (is_on_dark_screen == 0) {
                         var img_source = $card_img.find('img').attr('src');
                         var is_rotating = $card_img.closest('.card-rotate').length == 1 ? !0 : !1;
                         var $append_div = $card_img;
                         var colored_shadow_div = $('<div class="colored-shadow"/>');
                         
                         if (is_rotating) {
                             var card_image_height = $card_img.height();
                             var card_image_width = $card_img.width();
                             $(this).find('.back').css({
                                 'height': card_image_height + 'px',
                                 'width': card_image_width + 'px'
                             });
                             var $append_div = $card_img.find('.front')
                         }                       
                         colored_shadow_div.css({
                            'background-image': 'url(' + img_source + ')'                            
                         }).appendTo($append_div);
                         if ($card_img.width() > 700) {
                             colored_shadow_div.addClass('colored-shadow-big')
                         }
                         setTimeout(function() {
                             colored_shadow_div.css('opacity', 1)
                         }, 200)
                     }
                 })
             }
         }
     },
     initRotateCard: debounce(function() {
         $('.card-rotate .card-image > .back').each(function() {
             var card_image_height = $(this).parent().height();
             var card_image_width = $(this).parent().width();
             $(this).css({
                 'height': card_image_height + 'px',
                 'width': card_image_width + 'px'
             });
             if ($(this).hasClass('back-background')) {
                 var img_src = $(this).siblings('.front').find('img').attr('src');
                 $(this).css('background-image', 'url("' + img_src + '")')
             }
         })
     }, 17)
 }

 function debounce(func, wait, immediate) {
     var timeout;
     return function() {
         var context = this,
             args = arguments;
         clearTimeout(timeout);
         timeout = setTimeout(function() {
             timeout = null;
             if (!immediate) func.apply(context, args)
         }, wait);
         if (immediate && !timeout) func.apply(context, args)
     }
 };

 function isElementInViewport(elem) {
     var $elem = $(elem);
     var scrollElem = ((navigator.userAgent.toLowerCase().indexOf('webkit') != -1) ? 'body' : 'html');
     var viewportTop = $(scrollElem).scrollTop();
     var viewportBottom = viewportTop + $(window).height();
     var elemTop = Math.round($elem.offset().top);
     var elemBottom = elemTop + $elem.height();
     return ((elemTop < viewportBottom) && (elemBottom > viewportTop))
 }

 function debounceAtv(func, wait, immediate) {
     var timeout;
     return function() {
         var context = this,
             args = arguments;
         clearTimeout(timeout);
         timeout = setTimeout(function() {
             timeout = null;
             if (!immediate) func.apply(context, args);
         }, wait);
         if (immediate && !timeout) func.apply(context, args);
     };
 };

 function atvImg() {

     var d = document,
         de = d.documentElement,
         bd = d.getElementsByTagName('body')[0],
         win = window,
         imgs = d.querySelectorAll('.atvImg'),
         totalImgs = imgs.length,
         supportsTouch = 'ontouchstart' in win || navigator.msMaxTouchPoints;

     if (totalImgs <= 0) {
         return;
     }

     // build HTML
     for (var l = 0; l < totalImgs; l++) {

         var thisImg = imgs[l],
             layerElems = thisImg.querySelectorAll('.atvImg-layer'),
             totalLayerElems = layerElems.length;

         if (totalLayerElems <= 0) {
             continue;
         }

         while (thisImg.firstChild) {
             thisImg.removeChild(thisImg.firstChild);
         }

         var containerHTML = d.createElement('div'),
             shineHTML = d.createElement('div'),
             shadowHTML = d.createElement('div'),
             layersHTML = d.createElement('div'),
             layers = [];

         thisImg.id = 'atvImg__' + l;
         containerHTML.className = 'atvImg-container';
         shineHTML.className = 'atvImg-shine';
         shadowHTML.className = 'atvImg-shadow';
         layersHTML.className = 'atvImg-layers';

         for (var i = 0; i < totalLayerElems; i++) {
             var layer = d.createElement('div'),
                 imgSrc = layerElems[i].getAttribute('data-img');

             layer.className = 'atvImg-rendered-layer';
             layer.setAttribute('data-layer', i);
             layer.style.backgroundImage = 'url(' + imgSrc + ')';
             layersHTML.appendChild(layer);

             layers.push(layer);
         }

         containerHTML.appendChild(shadowHTML);
         containerHTML.appendChild(layersHTML);
         containerHTML.appendChild(shineHTML);
         thisImg.appendChild(containerHTML);

         var w = thisImg.clientWidth || thisImg.offsetWidth || thisImg.scrollWidth;
         thisImg.style.transform = 'perspective(' + w * 3 + 'px)';

         if (supportsTouch) {
             win.preventScroll = false;

             (function(_thisImg, _layers, _totalLayers, _shine) {
                 thisImg.addEventListener('touchmove', function(e) {
                     if (win.preventScroll) {
                         e.preventDefault();
                     }
                     processMovement(e, true, _thisImg, _layers, _totalLayers, _shine);
                 });
                 thisImg.addEventListener('touchstart', function(e) {
                     win.preventScroll = true;
                     processEnter(e, _thisImg);
                 });
                 thisImg.addEventListener('touchend', function(e) {
                     win.preventScroll = false;
                     processExit(e, _thisImg, _layers, _totalLayers, _shine);
                 });
             })(thisImg, layers, totalLayerElems, shineHTML);
         } else {
             (function(_thisImg, _layers, _totalLayers, _shine) {
                 thisImg.addEventListener('mousemove', function(e) {
                     processMovement(e, false, _thisImg, _layers, _totalLayers, _shine);
                 });
                 thisImg.addEventListener('mouseenter', function(e) {
                     processEnter(e, _thisImg);
                 });
                 thisImg.addEventListener('mouseleave', function(e) {
                     processExit(e, _thisImg, _layers, _totalLayers, _shine);
                 });
             })(thisImg, layers, totalLayerElems, shineHTML);
         }
     }

     processMovement = debounceAtv(function(e, touchEnabled, elem, layers, totalLayers, shine) {
         var bdst = $(window).scrollTop(),
             bdsl = bd.scrollLeft,
             pageX = (touchEnabled) ? e.touches[0].pageX : e.pageX,
             pageY = (touchEnabled) ? e.touches[0].pageY : e.pageY,
             offsets = elem.getBoundingClientRect(),
             w = elem.clientWidth || elem.offsetWidth || elem.scrollWidth, // width
             h = elem.clientHeight || elem.offsetHeight || elem.scrollHeight, // height
             wMultiple = 320 / w,
             offsetX = 0.52 - (pageX - offsets.left - bdsl) / w, //cursor position X
             offsetY = 0.52 - (pageY - offsets.top - bdst) / h, //cursor position Y
             dy = (pageY - offsets.top - bdst) - h / 2, //@h/2 = center of container
             dx = (pageX - offsets.left - bdsl) - w / 2, //@w/2 = center of container
             yRotate = (offsetX - dx) * (0.07 * wMultiple), //rotation for container Y
             xRotate = (dy - offsetY) * (0.1 * wMultiple); //rotation for container X

         //xRotate = xRotate - 140;
         imgCSS = 'rotateX(' + xRotate + 'deg) rotateY(' + yRotate + 'deg)' //img transform
         arad = Math.atan2(dy, dx), //angle between cursor and center of container in RAD
             angle = arad * 180 / Math.PI - 90; //convert rad in degrees

         //get angle between 0-360
         if (angle < 0) {
             angle = angle + 360;
         }

         //container transform
         if (elem.firstChild.className.indexOf(' over') != -1) {
             imgCSS += ' scale3d(1.07,1.07,1.07)';
         }
         elem.firstChild.style.transform = imgCSS;

         //gradient angle and opacity for shine
         //shine.style.background = 'linear-gradient(' + angle + 'deg, rgba(255,255,255,' + (pageY - offsets.top - bdst)/h * 0.4 + ') 0%,rgba(255,255,255,0) 80%)';
         //shine.style.transform = 'translateX(' + (offsetX * totalLayers) - 0.1 + 'px) translateY(' + (offsetY * totalLayers) - 0.1 + 'px)';

         //parallax for each layer
         var revNum = totalLayers;
         for (var ly = 0; ly < totalLayers; ly++) {
             layers[ly].style.transform = 'translateX(' + (offsetX * revNum) * ((ly * 2.5) / wMultiple) + 'px) translateY(' + (offsetY * totalLayers) * ((ly * 2.5) / wMultiple) + 'px)';
             revNum--;
         }
     }, 5);

     function processEnter(e, elem) {
         elem.firstChild.className += ' over';
     }

     function processExit(e, elem, layers, totalLayers, shine) {
         var container = elem.firstChild;

         setTimeout(function() {
             container.className = container.className.replace(' over', '');
             container.style.transform = '';
             shine.style.cssText = '';

             for (var ly = 0; ly < totalLayers; ly++) {
                 layers[ly].style.transform = '';
             }

         }, 50);


     }

 }